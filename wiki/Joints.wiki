#summary Describes the various Joints.
#labels Documentation-User,Featured

<wiki:toc max_depth="1" />

=Distance Joint=
The !DistanceJoint class represents a fixed distance between two bodies.  The bodies are allowed to rotate freely.  The !DistanceJoint class can also act like a spring-damper where specified fixed distance is a target distance (or rest distance).

This joint is defined by supplying the anchor points on both bodies in world coordinates.

=Friction Joint=
The !FrictionJoint class represents a joint that attempts to drive the relative motion between the bodies to zero.  The maximum force and torque members are used to limit the rate at which the motion is driven to zero.

This joint only requires one world space anchor point which is used as the pivot point for adding friction to the relative angular motion.

=Revolute Joint=
The !RevoluteJoint class represents a joint that only allows rotation between the joined bodies.  This class also supports the use of a motor and limits.  The motor can be used to apply motion between the bodies and the limits can be used to limit the angle between the two bodies.
  * The angular limits are *world space* angle limits relative to the initial angle between the two bodies.  Its recommended that one of the bodies be fixed when using angular limits.

This joint requires one world space anchor point which is used as the pivot point.

=Weld Joint=
The !WeldJoint class represents a joint that "welds" two bodies together.  This can be used to fix two bodies together as one, then removed to simulate destructible bodies.  When bodies are joined by a !WeldJoint their motion is as if they were one larger body.

Like the !DistanceJoint class you can add a spring-damper where at the anchor point.  This acts as a rotational spring damper instead of a linear spring damper.

This joint requires one world space anchor point which is used as the weld point.

=Line Joint (Deprecated)=
The !LineJoint class represents a joint that allows bodies to translate freely along an axis and rotate freely about a pivot point.  This joint is identical to the !PrismaticJoint except allows rotation about the pivot point.  Like the !RevoluteJoint and !PrismaticJoints, this joint allows for motors and limits.  The motor will drive the linear motion along the axis toward the given speed and the limits will limit the linear motion along the axis.

This joint requires one world space anchor point which is used as the pivot point and a world space axis used as the allowed translation axis.

*This joint has been deprecated and replaced with the !WheelJoint class.*

=Prismatic Joint=
The !PrismaticJoint class represents a joint that allows bodies to translate freely along an axis.  This joint is identical to the !LineJoint except does not allow rotation about the pivot point.  Like the !RevoluteJoint and !LineJoints, this joint allows for motors and limits.  The motor will drive the linear motion along the axis toward the given speed and the limits will limit the linear motion along the axis.

This joint requires one world space anchor point which is used as the pivot point to prevent rotation and a world space axis used as the allowed translation axis.

=Mouse Joint=
The !MouseJoint class is a joint that was specifically designed to perform picking using the mouse (but can be used with out the mouse).  The !MouseJoint creates a spring-damper distance joint at a specified world space point on the body and drives the distance to zero.  As the mouse (or something else) moves the body is dragged along as if it was connected by a rubber band.

This joint requires the initial target world space point and the spring-damper values.  Notice that this joint only accepts one body.

The setTarget(Vector2) method should be used to update the target point to drag the body to that position.

=Pulley Joint=
The !PulleyJoint class represents a joint connecting two bodies by a fixed length "rope."  The !PulleyJoint only limits translation along the "rope" axes and can limit the length of the "rope."  Setting the ratio to something other than 1.0 causes the pulley to emulate a block-and-tackle.

This joint requires a world space fixed point and a world space body point for each body.

=Rope Joint=
The !RopeJoint class represents a joint connecting two bodies by a "rope."  The !RopeJoint is best described as a !DistanceJoint with a max length or min length.  The bodies can move closer and further away and rotate freely, but are forced to be within some maximum or minimum distance of one another.

This joint requires a world space anchor point for each body and a maximum or minimum distance at which they can separate.  Initially when created, this joint acts like a !DistanceJoint where both the maximum and minimum are the same length.

=Angle Joint=
The !AngleJoint class represents a joint connecting two bodies limiting their angles.  This is similar to the !RevoluteJoint when limits are enforced.  When the angle limits are equal this joint will force both body's angles to be identical.  Regardless of the limits the bodies with this joint are allowed to translate freely.
  * The angular limits are <b>world space</b> angle limits relative to the initial angle between the two bodies.  Its recommended that one of the bodies be fixed when using angular limits.

This joint only requires that the two joined bodies be given, initially defaulting to equal limits.

=Wheel Joint=
The !WheelJoint class represents a joint connecting two bodies where the bodies are allowed to rotate about the given anchor point and translate about the given axis.  The translation portion of the allowed motion has an optional spring damper.  This creates an ideal joint for vehicles.

This joint requires a world space anchor point (the pivot point) and a world space (normalized) axis for the allowed translation.